name: Android Release

on:
  push:
    branches:
      - master

jobs:
  release-android:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: "stable"
          cache: true

      - name: Flutter version
        run: flutter --version

      - name: Install dependencies
        run: flutter pub get

      - name: Get Package name
        run: echo "PACKAGE_NAME=$(sed -nE 's/.*applicationId "(.*)".*/\1/p' android/app/build.gradle)" >> $GITHUB_ENV

      - name: Create key store file
        run: echo ${{ secrets.ANDROID_KEY_STORE_FILE_BASE64 }} | base64 -d > android/app/upload.jks

      - name: Create key.properties
        run: |
          echo "storeFile=./upload.jks" > android/key.properties
          echo "storePassword=${{ secrets.ANDROID_KEY_STORE_PASSWORD }}" >> android/key.properties
          echo "keyPassword=${{ secrets.ANDROID_KEY_PASSWORD }}" >> android/key.properties
          echo "keyAlias=${{ secrets.ANDROID_KEY_ALIAS }}" >> android/key.properties

      - name: Create Google Play credentials file
        run: echo ${{ secrets.ANDROID_GOOGLE_SERVICE_ACCOUNT_KEY_JSON_BASE64 }} | base64 --decode > android/service-account.json

      - name: Build APK
        run: flutter build appbundle

      # - name: Upload to Google Play Console
      #   id: deploy
      #   uses: r0adkll/upload-google-play@v1.1.3
      #   with:
      #     releaseFiles: build/app/outputs/bundle/release/app-release.aab
      #     serviceAccountJson: android/service-account.json
      #     packageName: ${{ env.PACKAGE_NAME }}
      #     track: production
      #     status: completed

  release-ios:
    runs-on: macos-latest
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: "stable"
          cache: true

      - name: Flutter version
        run: flutter --version

      - name: Install dependencies
        run: flutter pub get

      - name: Extract App Store Connect API Private Key in ./private_keys
        run: |
          mkdir ./private_keys
          echo "${{ secrets.APPLE_API_AUTHKEY_P8_BASE64 }}" | base64 -d > ./private_keys/AuthKey_${{ secrets.APPLE_API_KEY_ID }}.p8

      - name: Run flutter build
        id: build
        run: flutter build ipa --release --no-codesign

      # - name: Upload to App Store Connect
      #   run: >
      #     xcrun altool
      #     --upload-app
      #     --type ios
      #     -f build/ios/ipa/*.ipa
      #     --apiKey ${{ secrets.APPLE_API_KEY_ID }}
      #     --apiIssuer ${{ secrets.APPLE_API_ISSUER_ID }}
